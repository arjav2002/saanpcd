S' -> S
S -> stmt S
S -> func_defn S
S -> ''
stmt -> assign ;
stmt -> decl ;
stmt -> loop_stmt
stmt -> exp ;
stmt -> return_stmt
stmt -> cond
decl -> dtype var_list 
var_list -> vname_identifier
var_list -> var_list , vname_identifier 
assign -> var_list = exp_list
assign -> vname_identifier #= exp 
assign -> vname_identifier ~= exp 
assign -> vname_identifier *= exp 
assign -> vname_identifier /= exp 
assign -> vname_identifier %= exp 
assign -> vname_identifier MOD= exp 
assign -> vname_identifier **= exp 
assign -> vname_identifier &= exp 
assign -> vname_identifier |= exp
assign -> vname_identifier ^= exp 
assign -> vname_identifier >>= exp 
assign -> vname_identifier <<= exp
loop_stmt -> loop ( exp ) { stmt_list } 
if_stmt -> if ( exp ) { stmt_list } 
cond -> if_stmt
cond -> if_stmt elif_ladder else { stmt_list }
elif_ladder -> ''
elif_ladder -> elif_ladder elif ( exp ) { stmt_list }
return_stmt -> return exp ;
fname -> vname_identifier
func_defn -> ftype_terminal fname ( param_list ) { stmt_list }
stmt_list -> stmt stmt_list
stmt_list -> ''
param_list -> ''
param_list -> regular_param_list
param_list -> optional_param_list
param_list -> regular_param_list , optional_param_list
regular_param_list -> reg_param
regular_param_list -> regular_param_list , reg_param
reg_param -> dtype vname_identifier
optional_param_list -> optional_param
optional_param_list -> optional_param_list , optional_param
optional_param -> dtype vname_identifier = exp
exp_list -> exp_list , exp
exp_list -> exp
func_call -> vname_identifier ( arg_list )
arg_list -> ''
arg_list -> exp_list
arg_list -> keyword_arg_list
arg_list -> exp_list , keyword_arg_list
keyword_arg_list -> vname_identifier = exp
keyword_arg_list -> keyword_arg_list , vname_identifier = exp
exp -> exp11
exp11 -> exp11 or exp10
exp11 -> exp10 
exp10 -> exp9
exp10 -> exp10 and exp9
exp9 -> exp8 
exp9 -> exp9 | exp8 
exp8 -> exp7
exp8 -> exp8 ^ exp7 
exp7 -> exp6
exp7 -> exp7 & exp6
exp6 -> exp6 == exp5 
exp6 -> exp6 != exp5 
exp6 -> exp6 is exp5 
exp6 -> exp5 
exp5 -> exp5 < exp4  
exp5 -> exp5 <= exp4 
exp5 -> exp5 > exp4 
exp5 -> exp5 >= exp4 
exp5 -> exp4 
exp4 -> exp4 ~ exp3 
exp4 -> exp4 # exp3 
exp4 -> exp4 >> exp3 
exp4 -> exp4 << exp3 
exp4 -> exp3 
exp3 -> exp3 * exp2 
exp3 -> exp3 ** exp2 
exp3 -> exp3 / exp2 
exp3 -> exp3 MOD exp2
exp3 -> exp3 % exp2 
exp3 -> exp2 
exp2 -> # exp2 
exp2 -> ~ exp2 
exp2 -> ~~ exp2 
exp2 -> ## exp2 
exp2 -> exp1 
exp1 -> literal 
exp1 -> func_call 
exp1 -> vname_identifier 
exp1 -> vname_identifier ## 
exp1 -> vname_identifier ~~ 
exp1 -> exp1 [ exp ] 
exp1 -> ( exp ) 
literal -> int_lit 
literal -> char_lit 
literal -> bool_lit 
literal -> str_lit 
literal -> float_lit 
literal -> tuple_lit 
literal -> list_lit
char_lit -> ' char_terminal '
char_list -> ' escape_seq_terminal '
str_lit -> " multiple_char "
multiple_char -> multiple_char char_terminal
multiple_char -> ''
tup_list -> exp , 
tup_list -> tuplistb exp  
tup_list -> tuplistb exp , 
tuplistb -> tuplistb exp , 
tuplistb -> exp , 
tuple_lit -> ( tup_list )  
list_lit -> [ exp_list ]